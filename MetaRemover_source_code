from tkinter import filedialog
import exifread.tags
import piexif
from pdfrw import PdfReader, PdfWriter, PdfDict
from PyPDF2 import PdfFileReader, PdfFileWriter
import tkinter
import webbrowser
from GPSPhoto import gpsphoto
from PIL import Image
from PIL.ExifTags import TAGS
import os, platform

HEADER = '\033[95m'
OKBLUE = '\033[94m'
OKCYAN = '\033[96m'
OKGREEN = '\033[92m'
WARNING = '\033[93m'
FAIL = '\033[91m'
ENDC = '\033[0m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'

def get_Desktop(platform):
    desktop = os.path.join(os.path.join(os.path.expanduser('~')), 'Desktop')
    return desktop

def get_info(path):
    with open(path, 'rb') as f:
        pdf = PdfFileReader(f)
        info = pdf.getDocumentInfo()


    print(WARNING,info)

    author = info.author
    creator = info.creator
    producer = info.producer
    subject = info.subject
    title = info.title

def MetaDataRemoverPDF(path,Desktop,platform):
    if platform == "Darwin":
        respath = Desktop + '/ModifiedMetaData.pdf'
    else:
        respath = Desktop + '\ModifiedMetaData.pdf'

    pdf_reader = PdfReader(path)
    metadata = PdfDict(Author='Ghost', Title='Ghost' , Creator='Ghost',Producer="Ghost",Subject='Ghost',)
    pdf_reader.Info.update(metadata)
    PdfWriter().write(respath, pdf_reader)
    print(WARNING,"new file saved in",respath)

    print(OKGREEN,"operation has been completed successfully")

    return respath

def MetaDataRemoverIMG(path,Deskpath):
    print(ENDC)
    while True:
        try:
            operation = input('[1] Modify GPS Metadata\n[2] modify other information (Author, etc...) ')
            break
        except Exception as e:
            print(e)

    if operation == '1':
        while True:
            try:
                Latitude = float(input('enter Latitude : '))
                Longitude = float(input('enter longitude : '))
                break
            except Exception as e:
                print(e)
        photo = gpsphoto.GPSPhoto(path)
        info = gpsphoto.GPSInfo((Latitude, Longitude ), alt=83, timeStamp='2018:12:25 01:59:05')
        photo.modGPSData(info, 'ModifiedMetaData.jpg')
        print(WARNING,'opening Google Maps ......',ENDC)
        url = f"https://www.google.com/maps?q={Latitude},{Longitude}"
        webbrowser.open_new_tab(url)


    elif operation =='2':
        print(OKBLUE, "=========== Start of Current MetaData ===========")

        for (i,j) in Image.open(path)._getexif().items():
            print(f'{TAGS.get(i)} : {j}')
        print(OKBLUE, "=========== End of Current MetaData ===========")
        img = Image.open(path)

        try:
            # If the image already contains data, we only replace the relevant properties
            exif_dict = piexif.load(img.info['exif'])
            print(f"Exif load for file '{path}'' successful")
            exif_dict = {}
            exif_dict["0th"] = {}
            exif_dict["Exif"] = {}
            print(OKGREEN, 'EXIF Metadata has been removed successfully')
        except KeyError:
            # If the image has no Exif data, we create the relevant properties
            print(f"No Exif data for file '{path}', creating Exif data instead...")
            exif_dict = {}
            exif_dict["0th"] = {}
            exif_dict["Exif"] = {}




        # Convert into bytes and dump into file
        exif_bytes = piexif.dump(exif_dict)
        piexif.insert(exif_bytes, path)

    else:
        print(FAIL, 'incorrect operation')
        exit(1)
    print(OKGREEN, "operation has been completed successfully")


if __name__ == '__main__':
    os_platform = platform.system()

    print(FAIL,"""
      __  __      _          ____                                    
     |  \/  | ___| |_ __ _  |  _ \ ___ _ __ ___   _____   _____ _ __ 
     | |\/| |/ _ \ __/ _` | | |_) / _ \ '_ ` _ \ / _ \ \ / / _ \ '__|
     | |  | |  __/ || (_| | |  _ <  __/ | | | | | (_) \ V /  __/ |   
     |_|  |_|\___|\__\__,_| |_| \_\___|_| |_| |_|\___/ \_/ \___|_|   

        """)
    print(BOLD,OKBLUE,"[1] Remove Metadata from PDF \n  [2] Remove MetaData from picture")
    operation = input("---> ")
    if operation =='1':
        Deskpath  = get_Desktop(os_platform)
        print(OKGREEN,'Desktop_path : ' , Deskpath)
        root = tkinter.Tk()
        obj = tkinter.Label(root, text='Do not close this window, it will close automatically when choosen a file')
        obj.pack()
        path = ''
        counter = 0
        while path == '':
            if counter == 1:
                print(FAIL,"exiting....")
                exit(0)
                break
            path = str(filedialog.askopenfilename(initialdir=Deskpath, title='Select a PDF file')).strip()
            counter += 1
        obj.quit()
        print(OKGREEN,"path to PDF file is : ", path)
        print(OKBLUE,"=========== Start of Current MetaData ===========")

        get_info(path)

        print(OKBLUE,"=========== End of Current MetaData ===========")
        new_path = MetaDataRemoverPDF(path,Deskpath,os_platform)
        print(OKCYAN,"+++++ print new metadata from result.pdf +++++")

        get_info(new_path)
    elif operation == '2':
        if os_platform == "Darwin":
            print(WARNING, "Platform ---> OS X")
        else:
            print(WARNING, "Platform ---> Windows")

        Deskpath = get_Desktop(os_platform)
        print(OKGREEN, 'Desktop_path : ', Deskpath)
        root = tkinter.Tk()
        obj = tkinter.Label(root, text='Do not close this window, it will close automatically when choosen a file')
        obj.pack()
        path = ''
        counter = 0
        while path == '':
            if counter == 1:
                print(FAIL, "exiting....")
                exit(0)
                break
            path = str(filedialog.askopenfilename(initialdir=Deskpath, title='Select a Picture file')).strip()
            counter += 1
        obj.quit()
        MetaDataRemoverIMG(path,Deskpath)
    else:
        print(FAIL,'incorrect operation')
        exit(1)

    print(WARNING,"this program has been developed by")
    print("""
     ██ ▄█▀ ██░ ██  ▄▄▄       ██▓    ▓█████ ▓█████▄ 
     ██▄█▒ ▓██░ ██▒▒████▄    ▓██▒    ▓█   ▀ ▒██▀ ██▌
    ▓███▄░ ▒██▀▀██░▒██  ▀█▄  ▒██░    ▒███   ░██   █▌
    ▓██ █▄ ░▓█ ░██ ░██▄▄▄▄██ ▒██░    ▒▓█  ▄ ░▓█▄   ▌
    ▒██▒ █▄░▓█▒░██▓ ▓█   ▓██▒░██████▒░▒████▒░▒████▓ 
    ▒ ▒▒ ▓▒ ▒ ░░▒░▒ ▒▒   ▓▒█░░ ▒░▓  ░░░ ▒░ ░ ▒▒▓  ▒ 
    ░ ░▒ ▒░ ▒ ░▒░ ░  ▒   ▒▒ ░░ ░ ▒  ░ ░ ░  ░ ░ ▒  ▒ 
    ░ ░░ ░  ░  ░░ ░  ░   ▒     ░ ░      ░    ░ ░  ░ 
    ░  ░    ░  ░  ░      ░  ░    ░  ░   ░  ░   ░    
                                             ░       

        """)
